
#include "InputBufferLib2.h"

inputBufferHandler::inputBufferHandler(genericSerial p){
  _mySerial2 = &p;
  clearInputBuffer();
}

bool inputBufferHandler::anyDataInBuffer(){
    return _inputBufferIndex > 0; 
}

bool inputBufferHandler::inputCommandReady(){
  return _inputBufferLocked; 
}

long inputBufferHandler::inputBufferAge(){
    return millis() - _lastInputBufferReset;
}

char inputBufferHandler::getCharAt(int charIndex){
  return _inputBuffer[charIndex];
}
    
void inputBufferHandler::clearInputBuffer(){
  for (int i = 0; i < INPUT_BUFFER_SIZE; i++) _inputBuffer[i] = 0;
  _inputBufferLocked = false;
  _inputBufferIndex = 0;
  _lastInputBufferReset = millis();
}

void inputBufferHandler::clearOldData(long maxAge){
  if (inputBufferAge() > maxAge) clearInputBuffer();
}

void inputBufferHandler::checkAnyMessage() {
    if (_inputBufferLocked) return;

  while (byteAvailable() > 0) {
    char x = byteRead();
    if (!isControl(x)) {
      _inputBuffer[_inputBufferIndex] = x;
      _inputBufferLocked = (x == ';');
      
      if (x == '*') {
        clearInputBuffer();
        _inputBufferLocked = false;
      } else if (_inputBufferIndex < INPUT_BUFFER_SIZE) _inputBufferIndex += 1;              

     
     _lastInputBufferReset = millis();
     }    
  }
}

int inputBufferHandler::getBufferFlagAt(int offset) {
  char x;
  if (offset > INPUT_BUFFER_SIZE) return -1;
  if (offset > _inputBufferIndex) return -1;
  x = _inputBuffer[offset];
  if (isdigit(x)) return x - '0';
  return -1;
}


int inputBufferHandler::getBufferIntAt(int offset, int count, bool inverted) {
  int k1 = 0;
  for (int i = offset; i < offset + count; i++) {
    if (i <= _inputBufferIndex) {
      char x = _inputBuffer[i];
      if (isDigit(x)) {
        k1 = k1 * 10 + (inverted ? (9 - (x - '0')) :  (x - '0'));
      } else return -1;
    } else return -1;
  }
  return k1;
}

int inputBufferHandler::extractCheckedAddress(int startbyte) {
  int k1 = getBufferIntAt(startbyte, 3, false);
  if (k1 < 0) return -1;

  int k2 = getBufferIntAt(startbyte + 3, 3, true);
  if (k2 < 0) return -1;

  if (k1 != k2) return -1;
  return k1;
}


bool inputBufferHandler::byteAvailable(){
  return false;
}

char inputBufferHandler::byteRead(){
  return 0;
}

void inputBufferHandler::xbegin(int xferSpeed){
  ;
}


inputBufferHardSerial::inputBufferHardSerial(){
   clearInputBuffer();
}

bool inputBufferHardSerial::byteAvailable() {
  return Serial.available();
}

char inputBufferHardSerial::byteRead() {
  return Serial.read();
}

void inputBufferHardSerial::xbegin(int xferSpeed){
  Serial.begin(xferSpeed);
}


inputBufferSoftSerial::inputBufferSoftSerial(int rx_pin, int tx_pin) {
  _mySerial = &SoftwareSerial(rx_pin, tx_pin, false); 
  clearInputBuffer();
}

bool inputBufferSoftSerial::byteAvailable() {
  return _mySerial->available();
}

char inputBufferSoftSerial::byteRead() {
  return _mySerial->read();
}


void inputBufferSoftSerial::xbegin(int xferSpeed){
   _mySerial->begin(xferSpeed);
}
